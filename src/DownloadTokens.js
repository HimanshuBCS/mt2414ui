/**
 * @module src/DownloadTokens
 *
 * Component that display SourceDocument
 * Accepts the following properties:
 *  - language: Ethnologue code of the language
 *  - version: Version of the language
 *  - revision: Autogenerated for each updation of this same source
*/

import React, { Component } from 'react';
import './App.css';
import Header from './Header';
import Footer from './Footer';
import { FormControl } from 'react-bootstrap';
import SourceLanguages from './SourceLanguages';
import $ from 'jquery';
import GlobalURL from './GlobalURL';
import TargetLanguages from './TargetLanguages';
import Checkbox from './Checkbox';

const booksName1 = [
  'GEN', 'EXO', 'LEV', 'NUM', 'DEU', 'JOS', 'JDG', 'RUT', '1SA', '2SA', '1KI', '2KI', '1CH', '2CH', 'EZR', 'NEH', 'EST', 'JOB',
  'PSA', 'PRO', 'ECC', 'SNG', 'ISA', 'JER', 'LAM', 'EZK', 'DAN', 'HOS', 'JOL', 'AMO', 'OBA', 'JON', 'MIC', 'NAM', 'HAB', 'ZEP',
  'HAG', 'ZEC', 'MAL', 'MAT', 'MRK', 'LUK', 'JHN', 'ACT', 'ROM', '1CO', '2CO', 'GAL', 'EPH', 'PHP', 'COL', '1TH', '2TH', '1TI',
  '2TI', 'TIT', 'PHM', 'HEB', 'JAS', '1PE', '2PE', '1JN', '2JN', '3JN', 'JUD', 'REV'
];

const booksName2 = [
  'GEN', 'EXO', 'LEV', 'NUM', 'DEU', 'JOS', 'JDG', 'RUT', '1SA', '2SA', '1KI', '2KI', '1CH', '2CH', 'EZR', 'NEH', 'EST', 'JOB',
  'PSA', 'PRO', 'ECC', 'SNG', 'ISA', 'JER', 'LAM', 'EZK', 'DAN', 'HOS', 'JOL', 'AMO', 'OBA', 'JON', 'MIC', 'NAM', 'HAB', 'ZEP',
  'HAG', 'ZEC', 'MAL', 'MAT', 'MRK', 'LUK', 'JHN', 'ACT', 'ROM', '1CO', '2CO', 'GAL', 'EPH', 'PHP', 'COL', '1TH', '2TH', '1TI',
  '2TI', 'TIT', 'PHM', 'HEB', 'JAS', '1PE', '2PE', '1JN', '2JN', '3JN', 'JUD', 'REV'
];


class DownloadTokens extends Component {
  constructor(props) {
    super(props);

    this.state = {
      sourcelang:'tam',
      version: '',
      revision: '',
      targetlang:'mal',
      books: [],
      nbooks: [],
      uploaded:'uploadingStatus',
      message: ''
    }
      // Upload file specific callback handlers
      this.onSelect = this.onSelect.bind(this);
      this.downloadTokenWords = this.downloadTokenWords.bind(this);
      this.parseJSONToXLS = this.parseJSONToXLS.bind(this);
  }
  
  componentWillMount = () => {
    this.selectedCheckboxes1 = new Set();
    this.selectedCheckboxes2 = new Set();
  }

  toggleCheckbox1 = label => {
    if (this.selectedCheckboxes1.has(label)) {
      this.selectedCheckboxes1.delete(label);
    } else {
      this.selectedCheckboxes1.add(label);
    }
  }

  toggleCheckbox2 = label => {
    if (this.selectedCheckboxes2.has(label)) {
      this.selectedCheckboxes2.delete(label);
    } else {
      this.selectedCheckboxes2.add(label);
    }
  }


  createCheckbox1 = label => (
    <Checkbox
            label={label}
            handleCheckboxChange={this.toggleCheckbox1}
            key={label}
    />
  )

  createCheckbox2 = label => (
    <Checkbox
            label={label}
            handleCheckboxChange={this.toggleCheckbox2}
            key={label}
    />
  )

  createCheckboxes1 = () => (
    booksName1.map(this.createCheckbox1)
  )

  createCheckboxes2 = () => (
    booksName2.map(this.createCheckbox2)
  )

  onSelect(e) {
    this.setState({
      [e.target.name]: e.target.value });
  }

// For Downloads Token words
  downloadTokenWords(e){
    e.preventDefault();
    global.books = [];
    global.nbooks= [];
    for (const books of this.selectedCheckboxes1) {
      global.books = Array.from(this.selectedCheckboxes1);
    }
    for (const nbooks of this.selectedCheckboxes2) {
      global.nbooks = Array.from(this.selectedCheckboxes2);
    }


    var _this = this
    var data = { 
        "sourcelang": this.state.sourcelang, "version": this.state.version, "revision": this.state.revision , "targetlang": this.state.targetlang, "nbooks":global.nbooks, "books": global.books 
    }
    let accessToken = JSON.parse(window.localStorage.getItem('access_token'))
    $.ajax({
      url: GlobalURL["hostURL"]+"/v1/getbookwiseautotokens",
      contentType: "application/json; charset=utf-8",
      data : JSON.stringify(data),
      method : "POST",
      headers: {
                "Authorization": "bearer " + JSON.stringify(accessToken['access_token']).slice(1,-1),
      },
      success: function (result) {
        result = JSON.parse(result)
        if (result.success !== false){
         _this.parseJSONToXLS(result);
        }
        else {
          _this.setState({message: result.message, uploaded: 'failure'})
        }
      },
      error: function (error) {
       _this.setState({message: error.message, uploaded: 'failure'})
      }
    });  
  }

  // for parse JSON to XLS
  parseJSONToXLS(jsonData) {
      var jsonData1 = '';
       var dataUri1 = '';
      $.each(jsonData, function(key, value) {
        // var newLine = JSON.stringify(JSON.parse(JSON.stringify(jsonData[key]))).replace(/(?:\\[rn]|[\r\n]+)+/g, '\n');
        jsonData1 = key + '\n'
        dataUri1 = jsonData1 + dataUri1;
      });
        let dataUri = 'data:text/csv;charset=utf-8,%EF%BB%BF'+ encodeURIComponent(dataUri1);
        let exportFileDefaultName = this.state.sourcelang + this.state.version + 'Tokens.csv';    
        let linkElement = document.createElement('a');
        linkElement.setAttribute('href', dataUri);
        linkElement.setAttribute('download', exportFileDefaultName);
        linkElement.click();
  }

  render() {
    return(
      <div className="container">
        <Header/ >
        <div className="row">
          <form className="col-md-12 uploader" encType="multipart/form-data">
            <h1 className="source-headerCon">Download Tokens & Concordances</h1>&nbsp;
            <div className={"alert " + (this.state.uploaded === 'success'? 'alert-success msg' : 'invisible')}>
                <strong>{this.state.message}</strong>
            </div>
            <div className={"alert " + (this.state.uploaded === 'failure'? 'alert-danger msg': 'invisible') }>
                <strong>{this.state.message}</strong>
            </div>
              <div className="form-inline Concord1">&nbsp;&nbsp;&nbsp;&nbsp;
                <lable className="control-label Concord2"> <strong> Source Language </strong> </lable>
                    <FormControl value={this.state.sourcelang} onChange={this.onSelect} name="sourcelang" componentClass="select" placeholder="select">
                      {SourceLanguages.map((sourcelang, i) => <option  key={i} value={sourcelang.code}>{sourcelang.value}</option>)}
                    </FormControl>&nbsp;&nbsp;
                 <lable className="control-lable Concord2"> <strong> Version </strong> </lable>
                    <input value={this.state.version} onChange={this.onSelect} name="version" type="text"  placeholder="version" className="form-control"/>&nbsp; 
                <lable className="control-lable Concord2"> <strong> Revision </strong> </lable>
                    <input value={this.state.revision} onChange={this.onSelect} name="revision" type="text" placeholder="revision" className="form-control"/> &nbsp;
                <lable className="control-label Concord2"> <strong> Target Language </strong> </lable>
                    <FormControl value={this.state.targetlang} onChange={this.onSelect} name="targetlang" componentClass="select" placeholder="select">
                      {TargetLanguages.map((targetlang, i) => <option  key={i} value={targetlang.code}>{targetlang.value}</option>)}
                    </FormControl>&nbsp;&nbsp;
              </div>&nbsp;
              <div className="form-group">
                <div className="container">
                  <div className="row" >
                    <div className="col-sm-6">
                      <label className="bookHeader"><strong>Include Books</strong></label>
                      <form className="myCheck" >
                        {this.createCheckboxes1()}
                      </form>
                    </div>
                    <div className="col-sm-6">
                      <label className="bookHeader"><strong>Exclude Books</strong></label>
                      <form className="myCheck">
                        {this.createCheckboxes2()}
                      </form>
                    </div>
                  </div>
                </div>
              </div>
              <div className="form-group">
                <div className="form-group">
                  <button id="button" type="button" className="btn btn-success ConcordButton" onClick={this.downloadTokenWords}><span className="glyphicon glyphicon-download-alt">&nbsp;</span>Download Token & Concordances</button>&nbsp;&nbsp;&nbsp;&nbsp;
                </div>
              </div>
            </form>
          </div>
        <Footer/>
      </div>
      );
    }
}

export default DownloadTokens;