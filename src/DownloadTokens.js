/**
 * @module src/DownloadTokens
 *
 * Component that display SourceDocument
 * Accepts the following properties:
 *  - language: Ethnologue code of the language
 *  - version: Version of the language
 *  - revision: Autogenerated for each updation of this same source
*/

import React, { Component } from 'react';
import './App.css';
import Header from './Header';
import Footer from './Footer';
import { FormControl } from 'react-bootstrap';
import SourceLanguages from './SourceLanguages';
import $ from 'jquery';
import GlobalURL from './GlobalURL';
import TargetLanguages from './TargetLanguages';
import Checkbox from './Checkbox';
import booksName1 from './BookName';
import booksName2 from './BookName';


var tabData = [
  { name: 'Include Books', isActive: true },
  { name: 'Exclude Books', isActive: false }
];

class Tabs extends Component {
  render() {
    return (
      <ul className="nav nav-tabs">
        {tabData.map(function(tab, i){
          return (
            <Tab key={i} data={tab} isActive={this.props.activeTab === tab} handleClick={this.props.changeTab.bind(this,tab)} />
          );
        }.bind(this))}      
      </ul>
    );
  }
}

class Tab extends Component{
  render() {
    return (
      <li onClick={this.props.handleClick} className={this.props.isActive ? "active" : null}>
        <a href="#">{this.props.data.name}</a>
      </li>
    );
  }
}

class DownloadTokens extends Component {
  constructor(props) {
    super(props);
    
    this.state = {
      sourcelang:'tam',
      bookName: '',
      version: '',
      revision: '',
      targetlang:'mal',
      books: [],
      nbooks: [],
      uploaded:'uploadingStatus',
      message: '',
      activeTab: tabData[0],
      activeTabValue: '',
      dataDisplay: 'Include Books'
    }
      // Upload file specific callback handlers
      this.onSelect = this.onSelect.bind(this);
      this.downloadTokenWords = this.downloadTokenWords.bind(this);
      this.parseJSONToXLS = this.parseJSONToXLS.bind(this);
      this.handleClick = this.handleClick.bind(this);
  }

  handleClick(tab){
    this.setState({
      activeTab: tab,
      dataDisplay: tab.name
    });
  }

  componentWillMount = () => {
    this.selectedCheckboxes1 = new Set();
    this.selectedCheckboxes2 = new Set();
  }

  toggleCheckbox1 = label => {
    if (this.selectedCheckboxes1.has(label)) {
      this.selectedCheckboxes1.delete(label);
    } else {
      this.selectedCheckboxes1.add(label);
    }
  }

  toggleCheckbox2 = label => {
    if (this.selectedCheckboxes2.has(label)) {
      this.selectedCheckboxes2.delete(label);
    } else {
      this.selectedCheckboxes2.add(label);
    }
  }

  createCheckboxes1 = (obj) => (
    Object.keys(booksName1[0]).map(function(v, i){
      console.log(booksName1[0][v])

      return (<Checkbox
            label={booksName1[0][v]}
            handleCheckboxChange={obj.toggleCheckbox1}
            bookCode={v}
    />)
    })

  )

  createCheckboxes2 = (obj) => (
    Object.keys(booksName2[0]).map(function(v, i){
      return (<Checkbox
            label={booksName2[0][v]}
            handleCheckboxChange={obj.toggleCheckbox2}
            bookCode={v}
    />)
    })

  )

  onSelect(e) {
    this.setState({
      [e.target.name]: e.target.value });
  }

// For Downloads Token words
  downloadTokenWords(e){
    e.preventDefault();
    global.books = [];
    global.nbooks= [];

    // eslint-disable-next-line
    for (const books of this.selectedCheckboxes1) {  
      global.books = Array.from(this.selectedCheckboxes1);
    }

    // eslint-disable-next-line
    for (const nbooks of this.selectedCheckboxes2) { 
      global.nbooks = Array.from(this.selectedCheckboxes2);
    }


    var _this = this
    var data = { 
        "sourcelang": this.state.sourcelang, "version": this.state.version, "revision": this.state.revision , "targetlang": this.state.targetlang, "nbooks":global.nbooks, "books": global.books 
    }
    let accessToken = JSON.parse(window.localStorage.getItem('access_token'))
    $.ajax({
      url: GlobalURL["hostURL"]+"/v1/getbookwiseautotokens",
      contentType: "application/json; charset=utf-8",
      data : JSON.stringify(data),
      method : "POST",
      headers: {
                "Authorization": "bearer " + JSON.stringify(accessToken['access_token']).slice(1,-1),
      },

      beforeSend: function () {
          $(".modal").show();
      },
      complete: function () {
          $(".modal").hide();
      },
      success: function (result) {
        result = JSON.parse(result)
        if (result.success !== false){
         _this.parseJSONToXLS(result);
        }
        else {
          _this.setState({message: result.message, uploaded: 'failure'})
        }
      },
      error: function (error) {
       _this.setState({message: error.message, uploaded: 'failure'})
      }
    });  
  }

  // for parse JSON to XLS
  parseJSONToXLS(jsonData) {
    var array = [];
    var str = '';
    array = typeof jsonData !== 'object' ? JSON.parse(jsonData) : jsonData;
        for (var i = 0; i < array.length; i++) {
          str += array[i] + '\n';
        }
        str += '\r\n';
        var a = document.createElement('a');
        var blob = new Blob([ new Uint8Array([0xEF, 0xBB, 0xBF]), str], {'type':'application/vnd.ms-excel;charset=utf-8'});
        a.href = window.URL.createObjectURL(blob);
        a.download = this.state.sourcelang + this.state.version + 'Tokens.xls';
        a.click();
  }

  render() {
    return(
      <div className="container">
        <Header/ >
        <div className="row">
          <form className="col-md-12 uploader" encType="multipart/form-data">
            <h1 className="source-headerCon1">Download Wordlist</h1>&nbsp;
            <div className={"alert " + (this.state.uploaded === 'success'? 'alert-success msg' : 'invisible')}>
                <strong>{this.state.message}</strong>
            </div>
            <div className={"alert " + (this.state.uploaded === 'failure'? 'alert-danger msg': 'invisible') }>
                <strong>{this.state.message}</strong>
            </div>
              <div className="form-inline Concord1">&nbsp;&nbsp;&nbsp;&nbsp;
                <lable className="control-label Concord2"> <strong> Source Language </strong> </lable>
                    <FormControl value={this.state.sourcelang} onChange={this.onSelect} name="sourcelang" componentClass="select" placeholder="select">
                      { 
                        Object.keys(SourceLanguages[0]).map(function(v, i) {
                          return(<option  key={i} value={v}>{SourceLanguages[0][v]}</option>)
                        })
                      }
                    </FormControl>&nbsp;&nbsp;
                 <lable className="control-lable Concord2"> <strong> Version </strong> </lable>
                    <input value={this.state.version} onChange={this.onSelect} name="version" type="text"  placeholder="version" className="form-control"/>&nbsp; 
                <lable className="control-lable Concord2"> <strong> Revision </strong> </lable>
                    <input value={this.state.revision} onChange={this.onSelect} name="revision" type="text" placeholder="revision" className="form-control"/> &nbsp;
                <lable className="control-label Concord2"> <strong> Target Language </strong> </lable>
                    <FormControl value={this.state.targetlang} onChange={this.onSelect} name="targetlang" componentClass="select" placeholder="select">
                      { 
                        Object.keys(TargetLanguages[0]).map(function(v, i) {
                          return(<option  key={i} value={v}>{TargetLanguages[0][v]}</option>)
                        })
                      }    
                    </FormControl>&nbsp;&nbsp;
              </div>&nbsp;
              <div>
                <Tabs activeTab={this.state.activeTab}  changeTab={this.handleClick}/>
                <section className="panel panel-success" style={this.state.dataDisplay === 'Exclude Books' ? {display:'none'} : {display: 'inline'} }>
                  <h4 className="panel-heading">Include Books</h4>
                  <div className="exclude1">{this.createCheckboxes1(this)}</div>
                </section>
                <section className="panel panel-danger" style={this.state.dataDisplay === 'Include Books' ? {display:'none'} : {display: 'inline'} }>
                  <h4 className="panel-heading">Exclude Books</h4>
                  <div className="exclude1">{this.createCheckboxes2(this)}</div>
                </section>
              </div>
              <div className="form-group">
                  <button id="btnGet" type="button" className="btn btn-success ConcordButton" onClick={this.downloadTokenWords}><span className="glyphicon glyphicon-download-alt">&nbsp;</span>Download Wordlist</button>&nbsp;&nbsp;&nbsp;&nbsp;
              </div>
              <div className="modal" style={{display: 'none'}}>
                <div className="center">
                    <img alt="" src={require('./loader.gif')} />
                </div>
              </div>
            </form>
          </div>
        <Footer/>
      </div>
      );
    }
}

export default DownloadTokens;